---
title: Using the a9s Elasticsearch for PCF
owner: Partners
---

This topic describes how developers use a9s Elasticsearch for Pivotal Cloud Foundry (PCF) after it has been successfully installed. 
For information about installation, see [Installing and Configuring Elasticsearch for PCF](./installing.html).

##<a id='using'></a> Use a9s Elasticsearch for PCF with an App

To use the a9s Elasticsearch for PCF with with an app, follow the procedures below 
to create a service instance and bind the service instance to your app. 
For more information about managing service instances, see <a href="https://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html">Managing Service Instances with the CLI</a>.

### <a id="list"></a>View the Service

After the tile is installed, `a9s-elasticsearch` and its service plans appear in your Marketplace. 

1. To check the availability of the service and its plans, enter the following command:

    ```
    $ cf marketplace
    ```
    For example, 

    <pre class="terminal">
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK<br>
service               plans                                                                                                          description
a9s-elasticsearch     elasticsearch-single-small, elasticsearch-cluster-small, elasticsearch-single-big, elasticsearch-cluster-big   This is the anynines Elasticsearch 5 service.
    </pre>

2. See [Create a Service Instance](#create) to create Elasticsearch service instances based on the plans you listed in Step 1 above.

The plans that contain `single` in their names, provision single VM Elasticsearch servers. 
Plans with `cluster`, provision Elasticsearch clusters consisting of three VMs.

### <a id="create"></a> Create a Service Instance and Bind It to an App

You can provision a database with the `cf create-service`.

1. To create a service instance, enter the following command: 

    ```
    $ cf create-service a9a-elasticsearch PLAN-NAME SERVICE-INSTANCE-NAME
    ```

    For example, the following command creates an `elasticsearch-single-small` service 
    that provisions a single VM Elasticsearch server: 

    <pre class="terminal">
$ cf create-service a9s-elasticsearch elasticsearch-single-small my-elasticsearch-service
    </pre>

    Depending on your infrastructure and service broker usage, it may take several minutes to create the service instance.

2. To check the creation status, do one of the following:
    * To list all the service instances, enter:

        ```
        $ cf services
        ```
    * To display the status of one service instance, enter:

        ```
        $ cf service SERVICE-INSTANCE-NAME
        ```

3. After you create your database, bind the service instance to the app with the following command:

    ```
    $ cf bind-service APP-NAME SERVICE-INSTANCE-NAME
    ```
    
    For example, the following command binds the `my-elasticsearch-service` service instance to 
the `a9s-elasticsearch-app` app:
<pre class="terminal">
$ cf bind-service a9s-elasticsearch-app my-elasticsearch-service
</pre>

4. Restage or restart the app so that it can access the service instance by doing one of the following:
    * To restage the app, enter:

        ```
        $ cf restage APP-NAME
        ```
    * To restart the app, enter:

        ```
        $ cf restart APP-NAME
        ```
    
### <a id="obtain"></a>Obtain Service Instance Access Credentials

After you bind the service instance to the app, you can find the credentials of your Elasticsearch
database in the environment variables of the app. 
Because service instances are protected by HTTP Basic Auth, apps connected to it need to add authentication details to all requests.

You can use the host, username, and
password values with a Elasticsearch client to connect to the database.

1. To list the environment variables, including the credentials for the Elasticsearch database, enter the following command:
    ```
    $ cf env APP-NAME 
    ```
    For example, 
    <pre class="terminal">
$ cf env a9s-elasticsearch-app
Getting env variables for app a9s-elasticsearch-app in org test / space test as admin...
OK<br>
System-Provided:
{
 "VCAP\_SERVICES": {
  "a9s-elasticsearch": [
   {
     "credentials": {
      "host": [
       "EXAMPLE\_HOST"
      ],
      "password": "EXAMPLE\_USER",
      "username": "EXAMPLE\_PASSWORD"
    },
    "label": "a9s-elasticsearch",
    "name": "my-elasticsearch-service",
    "plan": "elasticsearch-cluster-small",
    "tags": [
     "searchengine"
    ]
   }
  ]
 }
}
...
    </pre>


2. Record the credentials that are listed under the <a href="https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES">VCAP_SERVICES</a> key.

##<a id='deleting'></a> Delete a a9s Elasticsearch for PCF Service Instance

Follow the instructions below to unbind your service instance from all apps and delete it.

1.  Back up the data stored in your database.
 
    <p class="note"><strong>Note</strong>: The delete operation cannot be undone and all data is lost when the service is deleted.</p>

1. List available services by entering the following command:

    ```
    $ cf service
    ```

    For example, the following shows that `my-elasticsearch-service` is bound to the `a9s-elasticsearch-app` app.
    <pre class="terminal">
$ cf service<br>
Getting services in org test / space test as admin...
OK<br>
name                       service             plan                         bound apps             last operation
my-elasticsearch-service   a9s-elasticsearch   elasticsearch-single-small   a9s-elasticsearch-app   create succeeded
    </pre>

### <a id="unbind"></a>Unbind a Service Instance

+ To unbind a service instance from your app, enter the following command:

    ```
    $ cf unbind-service APP-NAME SERVICE-INSTANCE-NAME
    ```

    For example, 
    <pre class="terminal">
    $ cf unbind-service a9s-elasticsearch-app my-elasticsearch-service
    </pre>


### <a id="delete"></a>Delete a Service Instance

Deleting a service deprovisions the corresponding infrastructure resources.

1. To delete a service instance, enter the following command:

    ```
    $ cf delete-service SERVICE-INSTANCE-NAME
    ```
 
    <pre class="terminal">
    $ cf delete-service my-elasticsearch-service
    </pre>

    It might take several minutes to delete the service.

1. To check the deletion status, enter the following command:

    ```
    $ cf services
    ```
