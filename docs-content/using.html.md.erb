# Using the a9s Elasticsearch

This topic describes how developers use a9s Elasticsearch.

- [Use a9s Elasticsearch with an Application](#use-a9s-elasticsearch-with-an-application)
  - [View the a9s Elasticsearch Service](#view-the-a9s-elasticsearch-service)
  - [Create a Service Instance](#create-a-service-instance)
  - [Bind an Application to a Service Instance](#bind-an-application-to-a-service-instance)
  - [Restage or Restart Your Application](#restage-or-restart-your-application)
  - [Obtain Service Instance Access Credentials](#obtain-service-instance-access-credentials)
- [Delete an a9s Elasticsearch Service Instance](#delete-an-a9s-elasticsearch-service-instance)
  - [List Available Services](#list-available-services)
  - [Unbind a Service Instance](#unbind-a-service-instance)
  - [Delete a Service Instance](#delete-a-service-instance)
- [Upgrade the Service Instance to another Service Plan](#upgrade-the-service-instance-to-another-service-plan)
- [Add a Graphite Endpoint](#add-a-graphite-endpoint)
- [Add a Syslog Endpoint](#add-a-syslog-endpoint)
- [Cloud Foundry Application Security Groups](#cloud-foundry-application-security-groups)
  - [Get Service Instance GUID](#get-service-instance-guid)
  - [Check available Security Groups](#check-available-security-groups)
- [Backup and Restore Service Instances](#backup-and-restore-service-instances)
  - [Get Dashboard Address, Login and Authorize](#get-dashboard-address-login-and-authorize)
  - [Perform a Backup](#perform-a-backup)
  - [Restore a Backup](#restore-a-backup)
- [Make a Service Instance Locally Available](#make-a-service-instance-locally-available)
  - [Get The Service Url and Credentials](#get-the-service-url-and-credentials)
  - [Create a Tunnel to The Service](#create-a-tunnel-to-the-service)

## Use a9s Elasticsearch with an Application

To use a9s Elasticsearch with an application, create a service instance and bind the service instance to your application. For more information on managing service instances, see [Managing Service Instances with the cf CLI](https://docs.cloudfoundry.org/devguide/services/managing-services.html).

### View the a9s Elasticsearch Service

After the service is installed, you can see the `a9s-elasticsearch5` and its service plans appear in your CF marketplace. Run `cf marketplace` to see the service listing:
```bash
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service               plans                                                     description
a9s-elasticsearch5    elasticsearch-single-small, elasticsearch-cluster-small,  This is the anynines Elasticsearch 5 service.
                      elasticsearch-single-big, elasticsearch-cluster-big
```

### Create a Service Instance

To provision an Elasticsearch database, run `cf create-service`. For example:

```bash
$ cf create-service a9s-elasticsearch5 elasticsearch-single-small my-elasticsearch-service
```

Depending on your infrastructure and service broker utilization, it may take several minutes to create the service instance.

Run the `cf services` command to view the creation status. This command displays a list of all your service instances. To view the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.

### Bind an Application to a Service Instance

After your database is created, run `cf bind-service` to bind the service to your application:

```bash
$ cf bind-service a9s-elasticsearch-app my-elasticsearch5-service
```

### Restage or Restart Your Application

To enable your application to access the service instance, run `cf restage` or `cf restart` to restage or restart your application.

### Obtain Service Instance Access Credentials

After a service instance is bound to an application, the credentials of your Elasticsearch database are stored in the environment variables of the application. Run `cf env APP-NAME` to display the environment variables.

You can find the credentials in the [VCAP_SERVICES](https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) key.

```bash
$ cf env a9s-elasticsearch-app
Getting env variables for app a9s-elasticsearch-app in org test / space test as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
   "a9s-elasticsearch5": [
    {
      "credentials": {
        "dns_servers": [
         "172.28.10.32",
         "172.28.11.11",
         "172.28.12.23"
        ],
        "host_ips": [
         "172.28.25.13:9200"
        ],
       "host": [
        "d67901c.service.dc1.a9svs:9200"
       ],
       "password": "a9s-brk-usr",
       "username": "a9s-password"
     },
     "label": "a9s-elasticsearch5",
     "name": "my-elasticsearch-service",
     "plan": "elasticsearch-cluster-small",
     "tags": [
      "searchengine"
     ]
    }
   ]
  }
}
...
```

You can use the host_ips, username and password values to connect to your database with a Elasticsearch client.

a9s Elasticsearch for PCF comes with its own Consul cluster to provide hostname resolving. When your DNS is configured to resolve the a9s Elasticsearch for PCF service instance domains you can make use of `hosts`.
For more information see <a href="./installing.html#name-resolving-with-consul" target="_blank">Name Resolving With Consul</a>.

## Delete an a9s Elasticsearch Service Instance

*WARNING: Before deleting a service instance, you must backup data stored in your database. This operation cannot be undone and all the data is lost when the service is deleted.*

Before you can delete a service instance, you must unbind it from all apps.

### List Available Services

Run `cf services` to list your available services.

```bash
$ cf services

Getting services in org test / space test as admin...
OK

name                       service              plan                         bound apps              last operation
my-elasticsearch-service   a9s-elasticsearch5   elasticsearch-single-small   a9s-elasticsearch-app   create succeeded
```

This example shows that `my-elasticsearch-service` is bound to the `a9s-elasticsearch-app` application.

### Unbind a Service Instance

Run `cf unbind-service` to unbind the service from your application.

```bash
$ cf unbind-service a9s-elasticsearch-app my-elasticsearch-service
```


### Delete a Service Instance

After unbinding the service, it is no longer bound to an application. Run `cf delete-service` to delete the service:

```bash
$ cf delete-service my-elasticsearch-service
```

It may take several minutes to delete the service. Deleting a service deprovisions the corresponding infrastructure resources.
Run the `cf services` command to view the deletion status.


## Upgrade the Service Instance to another Service Plan

Once created, you can upgrade your service instance to another, larger service plan. A larger service plan provides more CPU, RAM and storage. For more information, see the  [Update a Service Instance](https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service) of the _Managing Service Instances with the cf CLI_ topic.

```bash
$ cf update-service my-elasticsearch-service -p a-bigger-plan
```

Here are the plans you can upgrade to depending on the one you are currently
using:

* If you are currently using the `elasticsearch-single-small` plan, you can upgrade to the `elasticsearchgodb-single-big` plan.

* If you are currently using the `elasticsearch-cluster-small` plan, you can upgrade to the `elasticsearch-cluster-big` plan.

## Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to
where to information will be sent with the `cf update-service` command. This command expects the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding)
and a JSON string containing the `graphite` and `metrics_prefix` keys.
Depending on your graphite provider  the `metrics_prefix` might require that each metrics must start with an API key in their name. You can also change the interval within the data is send to the endpoint. Do to this modify `interval` the default is 10s.

```bash
$ cf update-service my-elasticsearch-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-cluster-elasticsearch", "interval": "5"}'
```

## Add a Syslog Endpoint

The `cf update-service` command used with the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) can let you stream your syslog to a third-party service. In this case, the command expects a JSON string containing the `syslog` key. You can also change the interval for the syslog with the same key used to specify graphite `interval`.

```bash
$ cf update-service my-elasticsearch-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"], "interval": "5" }'
```

## Cloud Foundry Application Security Groups

This topic describes how to check whether a security group was created.

Each a9s Data Service will automatically create and update Cloud Foundry security groups in order to protected service instances to be accessed by applications not running in the same Cloud Foundry applications space.
To get a better understanding about Security Groups you can have a look on the
[Understanding Application Security Groups](https://docs.cloudfoundry.org/concepts/asg.html) topic.

### Get Service Instance GUID

Run `cf service INSTANCE_NAME --guid` to get the guid of the service instance.

```bash
$ cf service my-elasticsearch --guid
ca16f111-5073-40b7-973a-156c75dd3028
```

### Check available Security Groups

To see all available security groups use `cf security-groups`.

```
$ cf security-groups
Getting security groups as demo@anynines.com
OK

     Name                                         Organization     Space
#0   public_networks
#1   dns
#2   tcp_open
#3   guard_432fb752-876d-443b-a311-a075f4df2237   demonstrations   demo
#4   guard_ca16f111-5073-40b7-973a-156c75dd3028   demonstrations   demo
```

There you can see a security group named `guard_ca16f111-5073-40b7-973a-156c75dd3028`
was successfully created.

*NOTE: in some circumstances the connection between the application and the service instance is not possible, in this case check if a security group was created.*

## Backup and Restore Service Instances

a9s Elasticsearch provides an easy way to create backups and restore if needed.

### Get Dashboard Address, Login and Authorize

1. Grap the dashboard URL with `cf service SERVICE-NAME`.
  ```bash
  $ cf service my-elasticsearch

  Service instance: my-elasticsearch
  Service: a9s-elasticsearch
  Bound apps:
  Tags:
  Plan: elasticsearch-single-small
  Description: This is a service creating and managing dedicated Elasticsearch service instances and clusters, powered by the anynines Service Framework
  Documentation url:
  Dashboard: https://a9s-elasticsearch-dashboard.aws.ie.a9s.eu/service-instances/ca16f111-5073-40b7-973a-156c75dd3028

  Last Operation
  Status: update succeeded
  Message:
  Started: 2017-10-26T08:28:38Z
  Updated: 2017-10-26T08:28:38Z
  ```

2. Browse to the dashboard URL and authenticate on the redirected page with your Cloud Foundry credentials:
![authentication-page](images/authentication-page.png)

3. Click **Authorize** to approve the authorization request:
![authorization-page](images/authorization-page.png)

### Perform a Backup

On the dashboard as shown above you can trigger a backup by clicking **Trigger backup**

![service-dashboard](images/service-dashboard.png)

After a short period of time the backup will be queued. The backup process will start soon.

![service-dashboard](images/service-dashboard-bkp-triggered.png)

*NOTE: Depending on the size of the data the backup might take some time.*

### Restore a Backup

Open the dashboard again and select the backup you would like to restore.
Click the **Restore** button of the backup. After a short period of time the restore will be triggered.

![service-dashboard](images/service-dashboard-restore-triggered.png)

*NOTE: Same as the backup, depending on the size of the data, the restore will might some time.*

![service-dashboard](images/service-dashboard-final.png)

## Make a Service Instance Locally Available

It is possible to access any of the a9s Data Services locally. That means you can connect with a local client to the service for any purpose such as debbuging.
CF provides a smart way to create SSH forward tunnels via a pushed application.
For more information about this feature see the [Accessing Apps with SSH](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html) section of the CF documentation.

First of all you must have an application bound to the service. How to do this see [Bind an Application to a Service Instance](#bind-an-application-to-a-service-instance).

*NOTE: `cf ssh` support must be enabled in the platform. Ask your administrator if you are not sure.*

### Get The Service Url and Credentials

When you follow this instructions [Obtain Service Instance Access Credentials](#obtain-service-instance-access-credentials) you will get the hostname of the service and the user credentials.

```bash
$ cf env a9s-elasticsearch-app
Getting env variables for app a9s-elasticsearch-app in org test / space test as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
   "a9s-elasticsearch5": [
    {
      "credentials": {
        "dns_servers": [
         "172.28.10.32",
         "172.28.11.11",
         "172.28.12.23"
        ],
        "host_ips": [
         "172.28.25.13:9200"
        ],
       "host": [
        "d67901c.service.dc1.a9svs:9200"
       ],
       "password": "a9s-brk-usr",
       "username": "a9s-password"
     },
     "label": "a9s-elasticsearch5",
     "name": "my-elasticsearch-service",
     "plan": "elasticsearch-cluster-small"
    }
   ]
  }
}
...
```

Notice the host `d67901c.service.dc1.a9svs`, the username `a9s-brk-usr` and the password `a9s-password`. You will need this in the next step.

### Create a Tunnel to The Service

With the `cf ssh` as mentioned before you can create a ssh forward tunnel to the management dashboard.
Use port 9200 to connect to the a9s Elasticsearch Instance.

```bash
$ cf ssh a9s-elasticsearch-app -L 9200:d67901c.service.dc1.a9svs:9200
vcap@956aaf4e-6da9-4f69-4b1d-8e631a403312:~$
```

When the ssh tunnel is open you can access the instance over the address `localhost:9200`.

*NOTE: Don't forget to close the session with `exit`.*
