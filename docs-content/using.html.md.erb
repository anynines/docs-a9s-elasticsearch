---
title: Using a9s Elasticsearch for PCF
owner: Partners
---

This topic describes how developers use a9s Elasticsearch.

## <a id='use-a9s-elasticsearch-with-an-application'></a> Use a9s Elasticsearch with an Application

To use a9s Elasticsearch with an application, create a service instance and bind the service instance to your application. For more information on managing service instances, see [Managing Service Instances with the cf CLI](https://docs.cloudfoundry.org/devguide/services/managing-services.html).

### <a id='view-the-a9s-elasticsearch-service'></a> View the a9s Elasticsearch Service

After the service is installed, you can see the `a9s-elasticsearch5` and its service plans appear in your CF marketplace. Run `cf marketplace` to see the service listing:
```bash
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service               plans                                                     description
a9s-elasticsearch5    elasticsearch-single-small, elasticsearch-cluster-small,  This is the anynines Elasticsearch 5 service.
                      elasticsearch-single-big, elasticsearch-cluster-big
```

### <a id='create-a-service-instance'></a> Create a Service Instance

To provision an Elasticsearch database, run `cf create-service`.

```bash
$ cf create-service a9s-elasticsearch5 elasticsearch-single-small my-elasticsearch-service
```

Depending on your infrastructure and service broker utilization, it may take several minutes to create the service instance.

Run the `cf services` command to view the creation status. This command displays a list of all your service instances. To view the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.

### <a id='bind-an-application-to-a-service-instance'></a> Bind an Application to a Service Instance

After your database is created, run `cf bind-service` to bind the service to your application:

```bash
$ cf bind-service a9s-elasticsearch-app my-elasticsearch5-service
```

### <a id='restage-or-restart-your-application'></a> Restage or Restart Your Application

To enable your application to access the service instance, run `cf restage` or `cf restart` to restage or restart your application.

### <a id='obtain-service-instance-access-credentials'></a> Obtain Service Instance Access Credentials

After a service instance is bound to an application, the credentials of your Elasticsearch database are stored in the environment variables of the application. Run `cf env APP-NAME` to display the environment variables.

You can find the credentials in the [VCAP_SERVICES](https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) key.

```bash
$ cf env a9s-elasticsearch-app
Getting env variables for app a9s-elasticsearch-app in org test / space test as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
   "a9s-elasticsearch5": [
    {
      "credentials": {
       "host": [
        "EXAMPLE_HOST"
       ],
       "password": "EXAMPLE_USER",
       "username": "EXAMPLE_PASSWORD"
     },
     "label": "a9s-elasticsearch5",
     "name": "my-elasticsearch-service",
     "plan": "elasticsearch-cluster-small",
     "tags": [
      "searchengine"
     ]
    }
   ]
  }
}
...
```

You can use the host, username, and password values to connect to your database with a Elasticsearch client.


## <a id='delete-an-a9s-elasticsearch-service-instance'></a> Delete an a9s Elasticsearch Service Instance

<p class='note warning'><strong>WARNING:</strong> Before deleting a service instance, you must backup data stored in your database. This operation cannot be undone and all the data is lost when the service is deleted.</p>

Before you can delete a service instance, you must unbind it from all apps.

### <a id='list-available-services'></a> List Available Services

Run `cf services` to list your available services.

```bash
$ cf services

Getting services in org test / space test as admin...
OK

name                       service              plan                         bound apps              last operation
my-elasticsearch-service   a9s-elasticsearch5   elasticsearch-single-small   a9s-elasticsearch-app   create succeeded
```

This example shows that `my-elasticsearch-service` is bound to the `a9s-elasticsearch-app` application.

### <a id='unbind-a-service-instance'></a> Unbind a Service Instance

Run `cf unbind-service` to unbind the service from your application.

```bash
$ cf unbind-service a9s-elasticsearch-app my-elasticsearch-service
```

### <a id='delete-a-service-instance'></a> Delete a Service Instance

After unbinding the service, it is no longer bound to an application. Run `cf delete-service` to delete the service:

```bash
$ cf delete-service my-elasticsearch-service
```

It may take several minutes to delete the service. Deleting a service deprovisions the corresponding infrastructure resources.
Run the `cf services` command to view the deletion status.


## <a id='upgrade-the-service-instance-to-another-service-plan'></a> Upgrade the Service Instance to Another Service Plan

Once created, you can upgrade your service instance to another, larger service plan. A larger service plan provides more CPU, RAM and storage. For more information, see the [Update a Service Instance](https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service) of the _Managing Service Instances with the cf CLI_ topic.

```bash
$ cf update-service my-elasticsearch-service -p a-bigger-plan
```

Here are the plans you can upgrade to, depending on the one you are currently using:

| Base Plan | Target Plan |
|------|-----------|
| elasticsearch-single-nano | elasticsearch-single-small <br> elasticsearch-single-medium <br> elasticsearch-single-big <br> elasticsearch-cluster-small <br> elasticsearch-cluster-medium <br> elasticsearch-cluster-big |
| elasticsearch-single-small | elasticsearch-single-medium <br> elasticsearch-single-big <br> elasticsearch-cluster-small <br> elasticsearch-cluster-medium <br> elasticsearch-cluster-big |
| elasticsearch-single-medium | elasticsearch-single-big <br> elasticsearch-cluster-medium <br> elasticsearch-cluster-big |
| elasticsearch-single-big | elasticsearch-cluster-big |
| elasticsearch-cluster-small | elasticsearch-cluster-medium <br> elasticsearch-cluster-big |
| elasticsearch-cluster-medium | elasticsearch-cluster-big |
| elasticsearch-single-nano-ssl | elasticsearch-single-small-ssl <br> elasticsearch-single-medium-ssl <br> elasticsearch-single-big-ssl <br> elasticsearch-cluster-small-ssl <br> elasticsearch-cluster-medium-ssl <br> elasticsearch-cluster-big-ssl |
| elasticsearch-single-small-ssl | elasticsearch-single-medium-ssl <br> elasticsearch-single-big-ssl <br> elasticsearch-cluster-small-ssl <br> elasticsearch-cluster-medium-ssl <br> elasticsearch-cluster-big-ssl |
| elasticsearch-single-medium-ssl | elasticsearch-single-big-ssl <br> elasticsearch-cluster-medium-ssl <br> elasticsearch-cluster-big-ssl |
| elasticsearch-single-big-ssl | elasticsearch-cluster-big-ssl |
| elasticsearch-cluster-small-ssl | elasticsearch-cluster-medium-ssl <br> elasticsearch-cluster-big-ssl |
| elasticsearch-cluster-medium-ssl | elasticsearch-cluster-big-ssl |


## <a id='add-a-graphite-endpoint'></a> Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to where to information will be sent with the `cf update-service` command. This command expects the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) and a JSON string containing the `graphite` and `metrics_prefix` keys.
Depending on your Graphite provider, the `metrics_prefix` might require that each metric must start with an API key in their name. You can also change the interval within the data is send to the endpoint. To do this, modify `interval`; the default is 10s.

```bash
$ cf update-service my-elasticsearch-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-cluster-elasticsearch", "interval": "5"}'
```


## <a id='add-a-syslog-endpoint'></a> Add a Syslog Endpoint

The `cf update-service` command used with the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) allows you to stream your syslog to a third-party service. In this case, the command expects a JSON string containing the `syslog` key. You can also change the interval for the syslog with the same key used to specify graphite `interval`.

```bash
$ cf update-service my-elasticsearch-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"], "interval": "5" }'
```


## <a id='cloud-foundry-application-security-groups'></a> Cloud Foundry Application Security Groups

This topic describes how to check whether a security group was created.

Each a9s Data Service will automatically create and update Cloud Foundry security groups in order to protected service instances to be accessed by applications not running in the same Cloud Foundry applications space. To understand Security Groups, see [Understanding Application Security Groups](https://docs.cloudfoundry.org/concepts/asg.html).

### <a id='get-service-instance-guid'></a> Get Service Instance GUID

Run `cf service INSTANCE_NAME --guid` to get the GUID of the service instance.

```bash
$ cf service my-elasticsearch --guid
ca16f111-5073-40b7-973a-156c75dd3028
```

### <a id='check-available-security-groups'></a> Check Available Security Groups

To see all available security groups, run `cf security-groups`.

```
$ cf security-groups
Getting security groups as demo@anynines.com
OK

     Name                                         Organization     Space
#0   public_networks
#1   dns
#2   tcp_open
#3   guard_432fb752-876d-443b-a311-a075f4df2237   demonstrations   demo
#4   guard_ca16f111-5073-40b7-973a-156c75dd3028   demonstrations   demo
```

In the above example, `guard_ca16f111-5073-40b7-973a-156c75dd3028` was successfully created.

<p class='note'><strong>Note:</strong> In some circumstances, the connection between the application and the service instance is not possible. In this case, check to see if a security group was created.</p>


## <a id='backup-and-restore-service-instances'></a> Back Up and Restore Service Instances

a9s Elasticsearch provides an easy way to create backups and restore if needed.

### <a id='get-dashboard-address-login-and-authorize'></a> Get Dashboard Address, Log In, and Authorize

1. Grab the dashboard URL with `cf service SERVICE-NAME`.
  ```bash
  $ cf service my-elasticsearch

  Service instance: my-elasticsearch
  Service: a9s-elasticsearch
  Bound apps:
  Tags:
  Plan: elasticsearch-single-small
  Description: This is a service creating and managing dedicated Elasticsearch service instances and clusters, powered by the anynines Service Framework
  Documentation url:
  Dashboard: https://a9s-elasticsearch-dashboard.aws.ie.a9s.eu/service-instances/ca16f111-5073-40b7-973a-156c75dd3028

  Last Operation
  Status: update succeeded
  Message:
  Started: 2017-10-26T08:28:38Z
  Updated: 2017-10-26T08:28:38Z
  ```

1. Browse to the dashboard URL and authenticate on the redirected page with your Cloud Foundry credentials:
![authentication-page](images/authentication-page.png)

1. Click **Authorize** to approve the authorization request:
![authorization-page](images/authorization-page.png)

### <a id='perform-a-backup'></a> Perform a Backup

On the dashboard, you can trigger a backup by clicking **Trigger backup**.

![service-dashboard](images/service-dashboard.png)

After a short period of time, the backup is queued.

![service-dashboard](images/service-dashboard-bkp-triggered.png)

<p class='note'><strong>Note:</strong> Depending on the size of the data, the backup will take some time.</p>

### <a id='restore-a-backup'></a> Restore a Backup

1. Click **Restore** and wait for the restore to trigger.

![service-dashboard](images/service-dashboard-restore-triggered.png)

<p class='note'><strong>Note:</strong> Depending on the size of the data, the restore will take some time.</p>

![service-dashboard](images/service-dashboard-final.png)


## <a id='make-a-service-instance-locally-available'></a> Make a Service Instance Locally Available

You can access any of the a9s Data Services locally. You can connect with a local client to the service for any purpose such as debugging. CF provides a smart way to create SSH forward tunnels through a pushed application. For more information about this feature, see the [Accessing Apps with SSH](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html) section of the CF documentation.

First, you must have an application bound to the service. To do this, see [Bind an Application to a Service Instance](#bind-an-application-to-a-service-instance).

<p class='note'><strong>Note:</strong> `cf ssh` support must be enabled in the platform. Your administrator can tell you whether it is enabled.</p>

### <a id='get-the-service-url-and-credentials'></a> Get The Service URL and Credentials

Follow the procedure in [Obtain Service Instance Access Credentials](#obtain-service-instance-access-credentials) to get the hostname of the service and the user credentials.

```bash
$ cf env a9s-elasticsearch-app
Getting env variables for app a9s-elasticsearch-app in org test / space test as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
   "a9s-elasticsearch5": [
    {
      "credentials": {
       "host": [
        "d67901c.service.dc1.a9svs"
       ],
       "password": "a9s-brk-usr",
       "username": "a9s-password"
     },
     "label": "a9s-elasticsearch5",
     "name": "my-elasticsearch-service",
     "plan": "elasticsearch-cluster-small"
    }
   ]
  }
}
...
```

Note the host `d67901c.service.dc1.a9svs`, the username `a9s-brk-usr`, and the password `a9s-password`. You will need these in the next step.

### <a id='create-a-tunnel-to-the-service'></a> Create a Tunnel to the Service

With `cf ssh`, you can create a SSH forward tunnel to the management dashboard. Use port `9200` to connect to the a9s Elasticsearch Instance.

```bash
$ cf ssh a9s-elasticsearch-app -L 9200:d67901c.service.dc1.a9svs:9200
vcap@956aaf4e-6da9-4f69-4b1d-8e631a403312:~$
```

When the SSH tunnel is open, you can access the instance using the address `localhost:9200`.

<p class='note'><strong>Note:</strong> Be sure to close the session by running <code>exit</code>.</p>
